# -*- coding: utf-8 -*-
"""Hr Casestudy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kE-ClpTb0o1sVswCvImL-5PgE3G7CtLW
"""



#Import Libraries
import numpy as np
import pandas as pd
import seaborn as sns

#Load the data
df = pd.read_csv('DATA.csv') 
df.head()

df.shape

df.dtypes

#Count the empty (NaN, NAN, na) values in each column
df.isna().sum()

df.describe()

df['Left'].value_counts()

#Drop columns useful column

#Over 18
df = df.drop('Over18', axis = 1)
#StandardHours
df = df.drop('StandardHours', axis = 1)
#complaintresolved 
df = df.drop('complaintresolved', axis = 1)
#complaintyears
df = df.drop('complaintyears', axis = 1)

df.isna().sum()

df.shape

df.corr()

import matplotlib.pyplot as plt

#Visualize the correlation
plt.figure(figsize=(11,11))  
sns.heatmap(df.corr(), annot=True, fmt='.0%')

"""Transform non-numeric columns to numerical columns."""

from sklearn.preprocessing import LabelEncoder

for column in df.columns:
        if df[column].dtype == np.number:
            continue
        df[column] = LabelEncoder().fit_transform(df[column])

df

"""#Split the data into X and Y"""

X = df.iloc[:, 0:-1]
y = df.iloc[:, -1]

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

from sklearn.ensemble import RandomForestClassifier

Forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
  Forest.fit(X_train, Y_train)

Forest.score(X_train, Y_train)

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(Y_test, Forest.predict(X_test))
  
TN = cm[0][0]
TP = cm[1][1]
FN = cm[1][0]
FP = cm[0][1]
  
print(cm)
print('Model Testing Accuracy = "{}!"'.format(  (TP + TN) / (TP + TN + FN + FP)))
print()

importances = pd.DataFrame({'feature':df.iloc[:, 0:-1].columns,'importance':np.round(Forest.feature_importances_,3)}) 
importances = importances.sort_values('importance',ascending=False).set_index('feature')
importances

importances.plot.bar(color='Green')